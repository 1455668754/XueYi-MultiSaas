<template>
  <BasicModal v-bind="$attrs" @register="registerModal" :title="getTitle" @ok="handleSubmit">
    <BasicForm @register="registerForm" />
  </BasicModal>
</template>

<script setup lang="ts">
  import { computed, ref, unref } from 'vue';
  import { formSchema } from './${businessName}.data';
  import { useMessage } from '@/hooks/web/useMessage';
  import {#if($table.tree) list${BusinessName}Api,#end get${BusinessName}Api, add${BusinessName}Api, edit${BusinessName}Api } from '@/api/${moduleName}/${authorityName}/${businessName}.api';
  import { BasicModal, useModalInner } from '@/components/Modal';
  import { BasicForm, useForm } from '@/components/Form';

  const emit = defineEmits(['success', 'register']);
  const { createMessage } = useMessage();
  const isUpdate = ref(true);

  const [registerForm, { resetFields, setFieldsValue,#if($table.tree) updateSchema,#end validate }] = useForm({
    labelWidth: 80,
    schemas: formSchema,
    showActionButtonGroup: false,
  });

  const [registerModal, { setModalProps, closeModal }] = useModalInner(async (data) => {
    resetFields();
    setModalProps({ confirmLoading: false });
    isUpdate.value = !!data?.isUpdate;

    if (unref(isUpdate)) {
      const ${businessName} = await get${BusinessName}Api(data.record.${pkColumn.javaField});
      setFieldsValue({...${businessName}});
    }
#if($table.tree)
    const treeData = await list${BusinessName}Api({
      id: unref(isUpdate) ? data.record.${pkColumn.javaField} : undefined,
      defaultNode: true,
      exNodes: unref(isUpdate),
    });
    updateSchema({ field: '${treeMap.parentIdColumn.javaField}', componentProps: { treeData } });
#end
  });

  /** 标题初始化 */
  const getTitle = computed(() => (!unref(isUpdate) ? '新增${functionName}' : '编辑${functionName}'));

  /** 提交按钮 */
  async function handleSubmit() {
    try {
      const values = await validate();
      setModalProps({ confirmLoading: true });
      unref(isUpdate)
        ? await edit${BusinessName}Api(values).then(() => {
            closeModal();
            createMessage.success('编辑${functionName}成功！');
          })
        : await add${BusinessName}Api(values).then(() => {
            closeModal();
            createMessage.success('新增${functionName}成功！');
          });
      emit('success');
    } finally {
      setModalProps({ confirmLoading: false });
    }
  }
</script>
