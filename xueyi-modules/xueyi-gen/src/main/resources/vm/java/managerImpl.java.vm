package ${packageName}.manager.impl;

#if($table.base)
#set($Entity="Base")
#set($generics =
"<"+${ClassName}+"Query, "+${ClassName}+"Dto, "+${ClassName}+"Po, "+${ClassName}+"Mapper, "+${ClassName}+"Converter>")
#elseif($table.tree)
#set($Entity="Tree")
#set($generics =
"<"+${ClassName}+"Query, "+${ClassName}+"Dto, "+${ClassName}+"Po, "+${ClassName}+"Mapper, "+${ClassName}+"Converter>")
#elseif($table.subBase)
#set($Entity="SubBase")
#set($generics =
"<"+${ClassName}+"Query, "+${ClassName}+"Dto, "+${ClassName}+"Po, "+${ClassName}+"Mapper, "+${ClassName}+
"Converter, "+${subClassName}+"Query, "+${subClassName}+"Dto, "+${subClassName}+"Po, "+${subClassName}+
"Mapper, "+${subClassName}+"Converter>")
#elseif($table.subTree)
#set($Entity="SubTree")
#set($generics =
"<"+${ClassName}+"Query, "+${ClassName}+"Dto, "+${ClassName}+"Po, "+${ClassName}+"Mapper, "+${ClassName}+
"Converter, "+${subClassName}+"Query, "+${subClassName}+"Dto, "+${subClassName}+"Po, "+${subClassName}+
"Mapper, "+${subClassName}+"Converter>")
#end
import ${packageName}.domain.query.${ClassName}Query;
import ${packageName}.domain.dto.${ClassName}Dto;
import ${packageName}.domain.po.${ClassName}Po;
import ${packageName}.domain.model.${ClassName}Converter;
import ${packageName}.mapper.${ClassName}Mapper;
#if($table.subBase || $table.subTree)
import ${subPackageName}.domain.query.${subClassName}Query;
import ${subPackageName}.domain.dto.${subClassName}Dto;
import ${subPackageName}.domain.po.${subClassName}Po;
import ${subPackageName}.domain.model.${subClassName}Converter;
import ${subPackageName}.mapper.${subClassName}Mapper;
import com.xueyi.common.core.utils.core.ObjectUtil;

import java.io.Serializable;
import java.util.Collection;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
#end
import com.xueyi.common.web.entity.manager.impl.${Entity}Manager;
import ${packageName}.manager.I${ClassName}Manager;
import org.springframework.stereotype.Component;

/**
 * ${functionName}管理 数据封装层处理
 *
 * @author ${author}
 */
@Component
public class ${ClassName}Manager extends ${Entity}Manager${generics} implements I${ClassName}Manager {
#if($table.subBase || $table.subTree)
#set($AttrName = $foreignColumn.javaField)
#if($AttrName.length() > 2 && $AttrName.substring(1,2).matches("[A-Z]"))
#set($field=$AttrName)
#else
#set($field=$AttrName.substring(0,1).toUpperCase() + ${AttrName.substring(1)})
#end
#set($subAttrName = $subForeignColumn.javaField)
#if($subAttrName.length() > 2 && $subAttrName.substring(1,2).matches("[A-Z]"))
#set($subField=$subAttrName)
#else
#set($subField=$subAttrName.substring(0,1).toUpperCase() + ${subAttrName.substring(1)})
#end

    /**
     * 设置主子表中子表外键值
     */
    @Override
    protected void setForeignKey(LambdaQueryWrapper<${subClassName}Po> queryWrapper, LambdaUpdateWrapper<${subClassName}Po> updateWrapper, ${ClassName}Dto ${classNameNoPrefix}, Serializable key) {
        Serializable ${subForeignColumn.javaField} = ObjectUtil.isNotNull(${classNameNoPrefix}) ? ${classNameNoPrefix}.
        get${field}() :key;
        if (ObjectUtil.isNotNull(queryWrapper))
            queryWrapper.eq(${subClassName}Po::get${subField}, ${subForeignColumn.javaField});
        else
            updateWrapper.eq(${subClassName}Po::get${subField}, ${subForeignColumn.javaField});
    }
#end
}